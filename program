using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.CommandLine;
using System.CommandLine.Invocation;

namespace CodeBundler
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var bundleCommand = new Command("bundle", "Bundles code files into one output file")
            {
                new Option<string>("--language", "Comma separated list of programming languages to include (e.g., 'C#, JavaScript'). If 'all', includes all files.")
                { IsRequired = true },

                new Option<string>("--output", "The output bundle file path.")
                { IsRequired = true },

                new Option<bool>("--e", "Whether to include source file paths as comments in the bundle."),

                new Option<bool>("--remove-empty-lines", "Whether to remove empty lines from the source code."),

                new Option<string>("--sort", "Sort the files by 'name' or 'type'. Default is by name."),

                new Option<string>("--author", "Name of the author to include in the bundle header as a comment.")
            };

            bundleCommand.Handler = CommandHandler.Create<string, string, bool, bool, string, string>((language, output, includeSource, removeEmptyLines, sort, author) =>
            {
                return BundleFiles(language, output, includeSource, removeEmptyLines, sort, author);
            });

            var rootCommand = new RootCommand
            {
                bundleCommand
            };

            await rootCommand.InvokeAsync(args);
        }

        static int BundleFiles(string language, string output, bool includeSource, bool removeEmptyLines, string sort, string author)
        {
            try
            {
                var sourceFolder = Directory.GetCurrentDirectory();
                var files = Directory.GetFiles(sourceFolder, "*.*", SearchOption.TopDirectoryOnly)
                                      .Where(f => IsValidLanguage(f, language)).ToList();

                if (sort == "name")
                    files = files.OrderBy(f => f).ToList();
                else if (sort == "type")
                    files = files.OrderBy(f => Path.GetExtension(f)).ToList();

                StringBuilder bundleContent = new StringBuilder();

                if (!string.IsNullOrEmpty(author))
                {
                    bundleContent.AppendLine($"// Author: {author}");
                }

                foreach (var file in files)
                {
                    var code = File.ReadAllText(file);
                    if (removeEmptyLines)
                    {
                        code = string.Join(Environment.NewLine, code.Split(Environment.NewLine)
                            .Where(line => !string.IsNullOrWhiteSpace(line)));
                    }
                    if (includeSource)
                    {
                        bundleContent.AppendLine($"// Source: {file}");
                    }

                    bundleContent.AppendLine(code);
                }

                File.WriteAllText(output, bundleContent.ToString());
                Console.WriteLine($"Bundle created successfully at: {output}");

                return 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                return 1;
            }
        }

        static bool IsValidLanguage(string filePath, string language)
        {

            if (language == "all") return true;

            var validExtensions = new Dictionary<string, List<string>>()
            {
                { "C#", new List<string> { ".cs" } },
                { "JavaScript", new List<string> { ".js" } },
            };

            foreach (var lang in language.Split(','))
            {
                if (validExtensions.ContainsKey(lang.Trim()))
                {
                    var ext = Path.GetExtension(filePath);
                    if (validExtensions[lang.Trim()].Contains(ext))
                    {
                        return true;
                    }
                }
            }

            return false;
        }
    }
}
